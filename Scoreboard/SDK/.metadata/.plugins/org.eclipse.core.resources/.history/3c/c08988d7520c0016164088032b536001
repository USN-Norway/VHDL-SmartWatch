/*
 * 	main.c
 *
 *  Created on: Mar 2, 2016
 *  Author: Qinghui Liu (Brian Liu)
 *
 *
 */

#include <stdio.h>
//#include "xio.h"
#include "xbasic_types.h"
#include "xparameters.h"
#include "xstatus.h"
#include "xil_exception.h"
#include "xintc.h"
#include "mb_interface.h"
#include <xgpio.h>
#include "xtft.h"
#include "xps2.h"
#include "xtmrctr_l.h"
#include "xtmrctr.h"
// covert int to u8[] or u8[] to int and decode kb number input
#include "kbDecode.h"

#define printf xil_printf	   	/* A smaller footprint printf */
//Ps2 Polled model
#define PS2_DEVICE_ID		XPAR_PS2_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_INTC_0_DEVICE_ID
static XPs2 Ps2Inst; 		/* Ps2 driver instance */
u8 KbBuffer, prKeyCode, nwKeyCode;

//Ps2 interrupt model
#define INTR_ID			XPAR_INTC_0_PS2_0_IP2INTC_IRPT_1_VEC_ID
#define TOTAL_TEST_BYTES	4 	/* Total Number of bytes to be*/

static XIntc IntcInst; 		/* Instance of the XIntc driver. */

void Ps2IntrHandler(void *CallBackRef, u32 IntrMask, u32 ByteCount);
//TFT VGA
#define TFT_DEVICE_ID	XPAR_TFT_0_DEVICE_ID
//#define TFT_FRAME_ADDR		XPAR_EMC_0_MEM0_HIGHADDR - 0x001FFFFF
#define TFT_FRAME_ADDR		XPAR_EMC_0_MEM0_BASEADDR
#define DISPLAY_COLUMNS  	640
#define DISPLAY_ROWS     	480
#define FGCOLOR_VALUE		0x0000FF00	/**< Foreground Color - Green */
#define BGCOLOR_VALUE		0x0		/**< Background Color - Black */
#define GREEN 				0x0000ff00
#define RED 				0x00ff0000
#define BLUE 				0x000000ff
#define WHITE 				0x00ffffff	/**< Color - White */
#define GREY				0x00AAAAAA  //grey
#define LITE_GREY			0x00333333
#define NS_GREY				0x00777777
#define NEW_COL				0x0000ffff
#define YELLOW				0x00FFFF00
#define LIGHT_YELLOW		0x00FFFF66
#define SILVER    			0x00C0C0C0
#define OLIVE				0x00808000
#define BLUEVIOLET			0x008A2BE2
#define DEEPSKY				0x0000BFFF
#define TOMATO				0x00FF6347
#define CRIMSON				0x00DC143C

//#define ID_SSG XPAR_DIGILENT_SEVSEG_DISP_BASEADDR // sevseg add

/***************** TFT Function Prototypes ************************/
static XTft TftInstance; /* TFT driver instance */
int TftWriteString(XTft *InstancePtr, const u8 *CharValue);
int XTft_DrawBox(XTft *Tft, int x1, int y1, int x2, int y2, unsigned int col);
int XTft_DrawSolidBox(XTft *Tft, int x1, int y1, int x2, int y2, unsigned int col);
int TftDrawLine(XTft *InstancePtr, int ColStartPos, int RowStartPos,
				int ColEndPos, int RowEndPos, unsigned int PixelVal);
int Draw_UIBox (XTft *TftInstance, unsigned int col);
void Tft_WriteChar(XTft* InstancePtr, u8 CharValue,
				u32 ColStartVal, u32 RowStartVal, u32 FgColor,
				u32 BgColor);
//int Draw_Circle(XTft *TftInstance, int Xmin, int Ymin,  unsigned int col);



//#define TMRCTR_DEVICE_ID	XPAR_TMRCTR_0_DEVICE_ID
//#define TMRCTR_DEVICE_ID	XPAR_XPS_TIMER_0_DEVICE_ID
//#define INTC_DEVICE_ID		XPAR_INTC_0_DEVICE_ID
//#define TMRCTR_INTERRUPT_ID	XPAR_INTC_0_TMRCTR_0_VEC_ID
#define TMRCTR_INTERRUPT_ID	XPAR_XPS_INTC_0_XPS_TIMER_0_INTERRUPT_INTR
//#define TIMER_FREQ XPAR_XPS_TIMER_0_CLOCK_FREQ_HZ
#define ONE_SECOND 		XPAR_XPS_TIMER_0_CLOCK_FREQ_HZ
#define TENTH_SECOND 	XPAR_XPS_TIMER_0_CLOCK_FREQ_HZ/10
#define HUNDH_SECOND	XPAR_XPS_TIMER_0_CLOCK_FREQ_HZ/100

static XTmrCtr tmrctr;
volatile int timerExpired;
void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber);

//states flag variables
u8 set_flag = 0, SET_CODE =0x00, alarm_flag =0, alarm_reset=0;
u8 timer_reset = 0, timer_alarm = 0;
u8 tm_start_flag = 0, tm_pause_flag = 0, tm_res_flag = 0, tm_rst_flag = 0;
u8 stw_start_flag =0, stw_lap_flag=0, stw_rst_flag = 0;
u8 str2int_flag =0;
u8 kb_number[]="0000000000";
u8* pkb_nb = kb_number;

//display strings
u8 rt_TS[] = "00", rt_SS[] = "00", rt_MM[] = "00",rt_HH[] = "00";
u8 rt_DD[] = "01", rt_MN[] = "01", rt_YY[] = "1600";
u8 al_HH[] = "00", al_MM[] = "00";
u8 tm_HH[] = "00", tm_MM[] = "00",tm_SS[] ="00",tm_TS[] ="00";
u8 lap_HH[]= "00", lap_MM[]= "00",lap_SS[]="00",lap_TS[]="00";
u8 stw_HH[]= "00", stw_MM[]= "00",stw_SS[]="00",stw_TS[]="00";
u8 kb_buffer[]="00";
//
int rt_hours, rt_minutes, rt_seconds, rt_tenthsec =0;
int al_hours, al_minutes, tm_hours, tm_seconds, tm_tenthsec, tm_minutes = 10;
int stw_hours, stw_minutes, stw_seconds, stw_tenthsec;
int rt_days, rt_months, rt_years;
unsigned int counter1;

#define right_offset 324

void Graphic_UI();		//initialize GUI
void decodeKbPress();	//process pressed keys
void kb_events();		//process valid key events
void Rt_Clock();		//real time clock by 0.01 seconds
void goStopWatch();		//start stopwatch counter
void goTimer();			//start timer counter

void goTimer()
{
	//tm_tenthsec --;

	if (tm_tenthsec > 0){
		tm_tenthsec --;
		int2str(tm_tenthsec,tm_TS);
	}else{
		if(tm_seconds > 0){
			tm_seconds--;
			int2str(tm_seconds,tm_SS);
			tm_tenthsec = 9;
			int2str(tm_tenthsec,tm_TS);
		}else{
			if (tm_minutes > 0) {
				tm_minutes--;
				int2str(tm_minutes,tm_MM);
				tm_seconds = 59;
				int2str(tm_seconds,tm_SS);
				tm_tenthsec = 9;
			}
		}
	}
}

int main()
{
	int status = XST_FAILURE;

/**************************************timer interrupts code**************************************/
	microblaze_enable_interrupts();
	XIntc* gpIntc = &IntcInst;			// Pointer to Interrupt Controller
	XTmrCtr* gpTmrCtr = &tmrctr;	// Pointer to Timer Counter, used for general timing
	status = XTmrCtr_Initialize( gpTmrCtr, 0 ); 		 // Initialize the first counter
	status = XIntc_Initialize( gpIntc, INTC_DEVICE_ID ); // Initialize the interrupt controller
	// Connect a device driver handler to call when an interrupt triggers for a device
	status = XIntc_Connect( gpIntc, TMRCTR_INTERRUPT_ID,
			(XInterruptHandler)XTmrCtr_InterruptHandler,
			(void*)gpTmrCtr );
	status = XIntc_Start( gpIntc, XIN_REAL_MODE ); // Start the interrupt with XIN_REAL_MODE
	//if ( status != XST_SUCCESS) return XST_FAILURE;

	XIntc_Enable( gpIntc, TMRCTR_INTERRUPT_ID );
	XTmrCtr_SetHandler( gpTmrCtr, TimerCounterHandler, gpTmrCtr );
	XTmrCtr_SetOptions( gpTmrCtr, 0,
			XTC_DOWN_COUNT_OPTION | XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION );

	//Set reset value for XTmrCtr
	//XTmrCtr_SetResetValue( gpTmrCtr, 0, ONE_SECOND );
	XTmrCtr_SetResetValue( gpTmrCtr, 0, HUNDH_SECOND );
	XTmrCtr_Start( gpTmrCtr, 0 );



/**************************************TFT VGA Module**************************************/
	XTft_Config *TftConfigPtr;
	u32 Delay;

	/* * Get address of xtft_config structure from the device ID*/
	TftConfigPtr = XTft_LookupConfig(TFT_DEVICE_ID);
	if (TftConfigPtr == (XTft_Config *)NULL)  return XST_FAILURE;

	/* * initialize tftInstance and fills screen with default background color*/
	status = XTft_CfgInitialize(&TftInstance, TftConfigPtr,
				 	TftConfigPtr->BaseAddress);
	if (status != XST_SUCCESS) 	return XST_FAILURE;

	/* * Wait till Vsync(Video address latch) status bit is set before writing
	 * the frame address into the Address Register. */
	while (XTft_GetVsyncStatus(&TftInstance) !=
					XTFT_IESR_VADDRLATCH_STATUS_MASK);

	/* * Change the Video Memory Base Address from default value to
	 * a valid Memory Address and clear the screen.*/
	//XTft_ScanNormal(&TftInstance);
	XTft_SetFrameBaseAddr(&TftInstance, TFT_FRAME_ADDR);
	XTft_SetColor(&TftInstance, 0, 0);
	XTft_ClearScreen(&TftInstance);
	for(Delay = 0; Delay <10000000; Delay++);



/**************************************Ps2 Code interrupt model **************************************/
	XPs2_Config *ConfigPtr;
	ConfigPtr = XPs2_LookupConfig(PS2_DEVICE_ID);
	XPs2_CfgInitialize(&Ps2Inst, ConfigPtr, ConfigPtr->BaseAddress);
	//status = XIntc_Initialize(&IntcInst, INTC_DEVICE_ID);
	status = XIntc_Connect(gpIntc, INTR_ID,
					(XInterruptHandler) XPs2_IntrHandler,
					&Ps2Inst);
	//status = XIntc_Start(gpIntc, XIN_REAL_MODE);
	XIntc_Enable(gpIntc, INTR_ID);
	XPs2_SetHandler(&Ps2Inst,(XPs2_Handler)Ps2IntrHandler, &Ps2Inst);
	XPs2_IntrEnable(&Ps2Inst, XPS2_IPIXR_RX_ALL);
	XPs2_IntrGlobalEnable(&Ps2Inst);


/***** Start Graphic UI******/
	Graphic_UI();

//..enter loop

	int loop = 1;
	while (loop == 1)
	{
		//display real time clock
		XTft_SetPos(&TftInstance, 515, 11);
		XTft_SetColor(&TftInstance, SILVER, 0);			 // clk_color = GREEN
		TftWriteString(&TftInstance, rt_HH);
		TftWriteString(&TftInstance, (u8*)" : ");
		TftWriteString(&TftInstance, rt_MM);
		TftWriteString(&TftInstance, (u8*)" : ");
		TftWriteString(&TftInstance, rt_SS);
		//TftWriteString(&TftInstance, (u8*)"0 9 : 0 8 . 8"); //u8 gm_clk[] = "000000"

		//XTft_SetPos(&TftInstance, 106, 10);
		//XTft_SetColor(&TftInstance, GREEN, 0);


		XTft_SetPos(&TftInstance, 185, 11);
		XTft_SetColor(&TftInstance, CRIMSON, BLUE);
		if (stw_rst_flag == 1){
			tm_minutes = 0;
			tm_seconds = tm_tenthsec =0;
			int2str(stw_minutes,tm_MM);
			int2str(stw_seconds,tm_SS);
			int2str(stw_tenthsec,tm_TS);
			stw_rst_flag = 0;
		} else {
			if (stw_start_flag == 1){
				//TftWriteString(&TftInstance, tm_MM);
				XTft_Write(&TftInstance, tm_MM[0]);
				TftWriteString(&TftInstance, (u8*)" ");
				XTft_Write(&TftInstance, tm_MM[1]);
				TftWriteString(&TftInstance, (u8*)" : ");
				//TftWriteString(&TftInstance, tm_SS);
				XTft_Write(&TftInstance, tm_SS[0]);
				TftWriteString(&TftInstance, (u8*)" ");
				XTft_Write(&TftInstance, tm_SS[1]);
				TftWriteString(&TftInstance, (u8*)"  .  ");
				XTft_Write(&TftInstance, tm_TS[1]);
			}
		}



//		TftWriteString(&TftInstance, (u8*)":");
//		TftWriteString(&TftInstance, rt_TS);
/*
		//display date
		XTft_SetPos(&TftInstance, 20, 28);
		XTft_SetColor(&TftInstance, WHITE, 0);
		TftWriteString(&TftInstance, (u8*)" Monday , "); // need modify for auto calculate
		TftWriteString(&TftInstance, rt_YY);
		TftWriteString(&TftInstance, (u8*)"/ ");
		TftWriteString(&TftInstance, rt_MN);
		TftWriteString(&TftInstance, (u8*)"/ ");
		TftWriteString(&TftInstance, rt_DD);

		if ((alarm_flag == 1)||(alarm_reset == 1)){
			XTft_SetPos(&TftInstance, 290, 10);
			if (alarm_reset == 1)
				XTft_SetColor(&TftInstance, GREEN, 0);
			else
				XTft_SetColor(&TftInstance, RED, 0);

			TftWriteString(&TftInstance, (u8*)"Alarm: ");
			//XTft_DrawBox(&TftInstance,350,8,450,22,NS_GREY); // Alarm box
			XTft_SetPos(&TftInstance, 372, 10);
			//XTft_SetColor(&TftInstance, GREEN, 0);
			TftWriteString(&TftInstance, al_HH);
			TftWriteString(&TftInstance, (u8*)" : ");
			TftWriteString(&TftInstance, al_MM);
			alarm_reset = 0;
		}

		if (timer_reset == 1){
			XTft_SetPos(&TftInstance, 372, 28);
			XTft_SetColor(&TftInstance, BLUE, 0);
			TftWriteString(&TftInstance, tm_HH);
			TftWriteString(&TftInstance, (u8*)" : ");
			TftWriteString(&TftInstance, tm_MM);
			TftWriteString(&TftInstance, (u8*)" : ");
			TftWriteString(&TftInstance, tm_SS);
			timer_reset = 0;
		}
		if (stw_start_flag == 1){
			XTft_SetPos(&TftInstance, 105, 64);
			XTft_SetColor(&TftInstance, GREEN, 0);
			TftWriteString(&TftInstance, stw_HH);
			TftWriteString(&TftInstance, (u8*)" : ");
			TftWriteString(&TftInstance, stw_MM);
			TftWriteString(&TftInstance, (u8*)" : ");
			TftWriteString(&TftInstance, stw_SS);
			TftWriteString(&TftInstance, (u8*)" : ");
			TftWriteString(&TftInstance, stw_TS);
		} else	if (stw_rst_flag == 1){
			//stw_HH = stw_MM = stw_SS= stw_TS = rst_V;
			stw_hours = stw_minutes = stw_seconds =stw_tenthsec =0;
			int2str(stw_hours,stw_HH);
			int2str(stw_minutes,stw_MM);
			int2str(stw_seconds,stw_SS);
			int2str(stw_tenthsec,stw_TS);
			XTft_SetPos(&TftInstance, 105, 64);
			XTft_SetColor(&TftInstance, GREEN, 0);
			TftWriteString(&TftInstance, stw_HH);
			TftWriteString(&TftInstance, (u8*)" : ");
			TftWriteString(&TftInstance, stw_MM);
			TftWriteString(&TftInstance, (u8*)" : ");
			TftWriteString(&TftInstance, stw_SS);
			TftWriteString(&TftInstance, (u8*)" : ");
			TftWriteString(&TftInstance, stw_TS);
			stw_rst_flag = 0;
		}*/

		kb_events();
	}
	if ( status != XST_SUCCESS) return XST_FAILURE;
	else return XST_SUCCESS;
}

//keyboard interrupts handler function
void Ps2IntrHandler(void *CallBackRef, u32 IntrMask, u32 ByteCount)
{
	XPs2_Recv(&Ps2Inst, &KbBuffer, 1);
	prKeyCode = nwKeyCode;
	nwKeyCode = KbBuffer;
	if (prKeyCode != nwKeyCode)
	{
		if (nwKeyCode == 0xF0){
			decodeKbPress();
			XPs2_IntrClear(&Ps2Inst,1);
		}
	}

}

//timer interrupts handler function
void TimerCounterHandler(void *CallBackRef, u8 TmrCtrNumber)
{
	XTmrCtr* InstancePtr = (XTmrCtr*)CallBackRef;
	if (XTmrCtr_IsExpired(InstancePtr, TmrCtrNumber)) {
		counter1++;
		if (counter1 >9){
			counter1 =0;
			Rt_Clock();

			if (stw_start_flag == 1){
				//goStopWatch();
				goTimer();
			}
			//not yet finish
			if (tm_start_flag == 1){
				//goTimer();
			}
		}
	}
}

void Rt_Clock()
{
	rt_tenthsec ++;
	if (rt_tenthsec > 9){
		rt_tenthsec = 0;
		int2str(rt_tenthsec,rt_TS);
		rt_seconds ++;
		if (rt_seconds >59){
			rt_seconds = 0;
			int2str(rt_seconds,rt_SS);
			rt_minutes++;
			if ((rt_minutes == al_minutes)&&
				(rt_hours == al_hours)){
				alarm_flag = 1;
			}else{
				alarm_flag = 0;
			}

			if(rt_minutes > 59){
				rt_minutes = 0;
				if ((rt_minutes == al_minutes)&&
					(rt_hours == al_hours)){
					alarm_flag = 1;
				}else{
					alarm_flag = 0;
				}
				int2str(rt_minutes,rt_MM);
				rt_hours++;
				if (rt_hours > 23){
					rt_hours = 0;
					int2str(rt_hours,rt_HH);
					rt_days++;
					// write code here to calculate calendar
					// need finish in future
				}else{
					int2str(rt_hours,rt_HH);
				}
			}else{
				int2str(rt_minutes,rt_MM);
			}
		}else{
			int2str(rt_seconds,rt_SS);
		}
	}
	else{
		int2str(rt_tenthsec,rt_TS);
	}
}

void goStopWatch()
{
	stw_tenthsec ++;
	if (stw_tenthsec > 9){
		stw_tenthsec = 0;
		int2str(stw_tenthsec,stw_TS);
		stw_seconds ++;
		if (stw_seconds >59){
			stw_seconds = 0;
			int2str(stw_seconds,stw_SS);
			stw_minutes++;
			if(stw_minutes > 59){
				stw_minutes = 0;
				int2str(stw_minutes,stw_MM);
				stw_hours++;
				int2str(stw_hours,stw_HH);

			}else{
				int2str(stw_minutes,stw_MM);
			}
		}else{
			int2str(stw_seconds,stw_SS);
		}
	}
	else{
		int2str(stw_tenthsec,stw_TS);
	}
}


void decodeKbPress()
{
	int i;
	switch (prKeyCode)
	{
		case 0x05:			//F1 key, reset time
		case 0x06:			//F2 key, reset alarm
		case 0x04:			//F3 key, reset calendar
		case 0x0C:			//F4 key, reset timer

		case 0x03:			//F5 key, reset others
		case 0x0B:			//F6 key, reset others
		case 0x83:			//F7 key, reset others
		case 0x0A:			//F8 key, reset others

		case 0x01:			//F9  key, reset others
		case 0x09:			//F10 key, reset others
		case 0x78:			//F11 key, reset others
		case 0x07:			//F12 key, reset others
		case 0x76:			//ESC key, reset others
			set_flag = 1;
			SET_CODE = prKeyCode;
			pkb_nb = &kb_number[0];
			for (i=0; i<8; i++){
				kb_number[i]='0';
			}
			break;
		case 0x5A:					//Enter Key, sent input number
			if(set_flag == 1){
				set_flag = 0;
				str2int_flag=1;
				pkb_nb = kb_number;
			}
			break;
		case 0x29:					//Space Key used to start or stop stopwatch
			set_flag = 0;
			if (stw_start_flag == 0){
				stw_start_flag = 1;
			}else{
				stw_start_flag = 0;
			}
			break;
		case 0x11:					//Alt Key used to lap or reset stopwatch
			set_flag = 0;
			if (stw_start_flag == 0){
				stw_rst_flag = 1;
				stw_lap_flag = 0;
			}else{
				stw_lap_flag = 1;
				stw_rst_flag = 0;
			}
			break;
		case 0x14:					//Ctrl Key used to start or stop timer
			set_flag = 0;
			if (tm_start_flag == 0){
				tm_start_flag = 1;

			}else{
				tm_start_flag = 0;
			}
			break;
		case 0x12:					//Shift1 Key used to pause or resume or reset timer
		case 0x59:					//Shift2 Key
			set_flag = 0;
			if (tm_start_flag == 1){
				if (tm_pause_flag == 0)tm_pause_flag = 1 ;
				else tm_pause_flag = 0 ;
			}
			break;
		default :
			if (set_flag == 1){
				prKeyCode = KbDeCode(prKeyCode);
				if (prKeyCode == ','){
					set_flag = 0;
					SET_CODE = 0;
					pkb_nb = &kb_number[0];
					for (i=0; i<8; i++){
						kb_number[i]='0';
					}
				}else {
					*(pkb_nb++) = prKeyCode;
				}
			}
			break;
	}
}


void kb_events()
{
	if (str2int_flag == 1){
		switch (SET_CODE){
			case 0x05:				//F1 rest time
				kb_buffer[0]=kb_number[0];
				kb_buffer[1]=kb_number[1];
				rt_hours = str2Int(kb_buffer);
				int2str(rt_hours,rt_HH);
				kb_buffer[0]=kb_number[2];
				kb_buffer[1]=kb_number[3];
				rt_minutes = str2Int(kb_buffer);
				int2str(rt_minutes,rt_MM);
				kb_buffer[0]=kb_number[4];
				kb_buffer[1]=kb_number[5];
				rt_seconds = str2Int(kb_buffer);
				break;
			case 0x06:				//F2 rest Alarm
				al_HH[0]=kb_number[0];
				al_HH[1]=kb_number[1];
				al_hours = str2Int(al_HH);
				al_MM[0]=kb_number[2];
				al_MM[1]=kb_number[3];
				al_minutes = str2Int(al_MM);
				alarm_reset = 1;
				break;
			case 0x04:				//F3 rest calendar
				rt_YY[0]=kb_number[0];
				rt_YY[1]=kb_number[1];
				rt_YY[2]=kb_number[2];
				rt_YY[3]=kb_number[3];
				rt_years = str2Int(rt_YY);
				rt_MN[0]=kb_number[4];
				rt_MN[1]=kb_number[5];
				rt_months = str2Int(rt_MN);
				rt_DD[0]=kb_number[6];
				rt_DD[1]=kb_number[7];
				rt_days = str2Int(rt_DD);
				break;
			case 0x0C:				//F4 rest TMer
				tm_MM[0]=kb_number[0];
				tm_MM[1]=kb_number[1];
//				tm_hours = str2Int(tm_HH);
//				tm_MM[0]=kb_number[2];
//				tm_MM[1]=kb_number[3];
//				tm_minutes = str2Int(tm_MM);
//				tm_SS[0]=kb_number[4];
//				tm_SS[1]=kb_number[5];
//				tm_seconds = str2Int(tm_SS);
				timer_reset = 1;
				break;
		}
		str2int_flag =0;
	}
}


void Graphic_UI()
{
//	Draw_UIBox (&TftInstance,LITE_GREY);
//	XTft_SetColor(&TftInstance, WHITE, 0);
//	XTft_SetPos(&TftInstance, 20, 105);
//	TftWriteString(&TftInstance, (u8*)"HINTS: F1+6*number+Enter to Reset Time, F2-Alarm, F3-Date, F4-Timer.");

// draw Time UI
//	XTft_DrawBox(&TftInstance,100,8,220,22,NS_GREY); // time box
//	XTft_SetPos(&TftInstance, 20, 10);
//	XTft_SetColor(&TftInstance, GREEN, 0);
//	TftWriteString(&TftInstance, (u8*)"Time: ");
	XTft_DrawBox(&TftInstance, 5, 5, 490, 110, WHITE ); // HOME team name box

	XTft_DrawBox(&TftInstance, 20, 8, 142, 24, TOMATO ); // HOME team name box
	XTft_DrawSolidBox(&TftInstance, 20+24, 26, 80+24, 42, BLUE ); // HOME team score box

	XTft_SetPos(&TftInstance, 30+24, 11);
	XTft_SetColor(&TftInstance, TOMATO, 0);			//
	TftWriteString(&TftInstance, (u8*)"HOME");		//u8 home_name[] = "000000"
	XTft_SetPos(&TftInstance, 30+24, 28);
	XTft_SetColor(&TftInstance, TOMATO, BLUE);			// home_color = GREEN
	TftWriteString(&TftInstance, (u8*)"1 0 8");		//u8 home_score[] = "000"

	XTft_SetPos(&TftInstance, 60, 54);
	XTft_SetColor(&TftInstance, DEEPSKY, 0);			//
	TftWriteString(&TftInstance, (u8*)"Bonus");		//

	XTft_DrawSolidBox(&TftInstance, 20, 70, 80, 86, NS_GREY ); // Fouls  box
	XTft_DrawBox(&TftInstance, 20, 88, 80, 104, NS_GREY ); // Fouls number box
	XTft_SetPos(&TftInstance, 24, 72);
	XTft_SetColor(&TftInstance, BLUE, NS_GREY);			//
	TftWriteString(&TftInstance, (u8*)"Fouls");		//
	XTft_SetPos(&TftInstance, 44, 90);
	XTft_SetColor(&TftInstance, DEEPSKY, 0);			// Fouls_color = GREEN
	TftWriteString(&TftInstance, (u8*)"8");		//u8 fouls_num[] = "000"

	XTft_DrawSolidBox(&TftInstance, 82, 70, 142, 86, NS_GREY ); // T.O.L  box
	XTft_DrawBox(&TftInstance, 82, 88, 142, 104, NS_GREY ); // T.O.L number box
	XTft_SetPos(&TftInstance, 84, 72);
	XTft_SetColor(&TftInstance, BLUE, NS_GREY);			//
	TftWriteString(&TftInstance, (u8*)"T.O.L");		//
	XTft_SetPos(&TftInstance, 100, 90);
	XTft_SetColor(&TftInstance, DEEPSKY, 0);			// TOL_color = GREEN
	TftWriteString(&TftInstance, (u8*)"3");		//u8 TOL_num[] = "000"

	XTft_DrawSolidBox(&TftInstance, 182, 70, 242, 86, SILVER ); // Player  box
	XTft_DrawBox(&TftInstance, 182, 88, 242, 104, SILVER ); // Player number box
	XTft_SetPos(&TftInstance, 185, 72);
	XTft_SetColor(&TftInstance, BLUE, SILVER);			//
	TftWriteString(&TftInstance, (u8*)"Player");		//
	XTft_SetPos(&TftInstance, 197, 90);
	XTft_SetColor(&TftInstance, SILVER, 0);			// ply_color = GREEN
	TftWriteString(&TftInstance, (u8*)"1 8");		//u8 ply_num[] = "00"

	XTft_DrawSolidBox(&TftInstance, 244, 70, 304, 86, SILVER ); // Ply_fouls  box
	XTft_DrawBox(&TftInstance, 244, 88, 304, 104, SILVER ); // Ply_fouls number box
	XTft_SetPos(&TftInstance, 245, 72);
	XTft_SetColor(&TftInstance, BLUE, SILVER);			//
	TftWriteString(&TftInstance, (u8*)"Fouls");		//
	XTft_SetPos(&TftInstance, 263, 90);
	XTft_SetColor(&TftInstance, SILVER, 0);			// pf_color = GREEN
	TftWriteString(&TftInstance, (u8*)"3");		//u8 pf_num[] = "00"

// central clock ui

	XTft_DrawSolidBox(&TftInstance, 162, 8, 324, 24, BLUE ); // Game Clock box

	XTft_DrawSolidBox(&TftInstance, 182, 26, 242, 42, NS_GREY ); // Shot clk  box
	XTft_DrawBox(&TftInstance, 182, 44, 242, 60, NS_GREY ); // shot clk number box
	XTft_SetPos(&TftInstance, 190, 29);
	XTft_SetColor(&TftInstance, WHITE, NS_GREY);			//
	TftWriteString(&TftInstance, (u8*)"Shot");		//
	XTft_SetPos(&TftInstance, 200, 46);
	XTft_SetColor(&TftInstance, NEW_COL, 0);			// shot_color = GREEN
	TftWriteString(&TftInstance, (u8*)"2 4");		//u8 shot_num[] = "00"

	XTft_DrawSolidBox(&TftInstance, 244, 26, 304, 42, NS_GREY ); // Period  box
	XTft_DrawBox(&TftInstance, 244, 44, 304, 60, NS_GREY ); // Period number box
	XTft_SetPos(&TftInstance, 246, 29);
	XTft_SetColor(&TftInstance, WHITE, NS_GREY);			//
	TftWriteString(&TftInstance, (u8*)"Period");		//
	XTft_SetPos(&TftInstance, 270, 46);
	XTft_SetColor(&TftInstance, LIGHT_YELLOW, 0);			// prd_color = GREEN
	TftWriteString(&TftInstance, (u8*)"3");		//u8 prd_num


// visit team ui


	XTft_DrawBox(&TftInstance, 20+right_offset, 8, 142+right_offset, 24, YELLOW ); // Visit team name box
	XTft_DrawSolidBox(&TftInstance, 20+right_offset+24, 26, 80+right_offset+24, 42, BLUE ); // visit team score box

	XTft_SetPos(&TftInstance, 30+right_offset+24, 11);
	XTft_SetColor(&TftInstance, YELLOW, 0);			//
	TftWriteString(&TftInstance, (u8*)"Visit");		//u8 visit_name[] = "000000"
	XTft_SetPos(&TftInstance, 40+right_offset+24, 28);
	XTft_SetColor(&TftInstance, YELLOW, BLUE);			// visit_color = GREEN
	TftWriteString(&TftInstance, (u8*)"9 8");		//u8 visit_score[] = "000"

	XTft_SetPos(&TftInstance, 60+right_offset, 54);
	XTft_SetColor(&TftInstance, BLUEVIOLET, 0);		//
	TftWriteString(&TftInstance, (u8*)"Bonus");		//

	XTft_DrawSolidBox(&TftInstance, 20+right_offset, 70, 80+right_offset, 86, NS_GREY ); // Fouls  box
	XTft_DrawBox(&TftInstance, 20+right_offset, 88, 80+right_offset, 104, NS_GREY ); // Fouls number box
	XTft_SetPos(&TftInstance, 24+right_offset, 72);
	XTft_SetColor(&TftInstance, YELLOW, NS_GREY);			//
	TftWriteString(&TftInstance, (u8*)"T.O.L");		//
	XTft_SetPos(&TftInstance, 44+right_offset, 90);
	XTft_SetColor(&TftInstance, YELLOW, 0);			// Fouls_color = GREEN
	TftWriteString(&TftInstance, (u8*)"3");		//u8 fouls_num[] = "000"

	XTft_DrawSolidBox(&TftInstance, 82+right_offset, 70, 142+right_offset, 86, NS_GREY ); // T.O.L  box
	XTft_DrawBox(&TftInstance, 82+right_offset, 88, 142+right_offset, 104, NS_GREY ); // T.O.L number box
	XTft_SetPos(&TftInstance, 84+right_offset, 72);
	XTft_SetColor(&TftInstance, YELLOW, NS_GREY);			//
	TftWriteString(&TftInstance, (u8*)"Fouls");		//
	XTft_SetPos(&TftInstance, 100+right_offset, 90);
	XTft_SetColor(&TftInstance, YELLOW, 0);			// TOL_color = GREEN
	TftWriteString(&TftInstance, (u8*)"5");		//u8 TOL_num[] = "000"
}


int TftWriteString(XTft *InstancePtr, const u8 *CharValue)
{
	while (*CharValue != 0) {
		XTft_Write(InstancePtr, *CharValue);
		CharValue++;
	}
	return XST_SUCCESS;
}

int XTft_DrawBox(XTft *Tft, int x1, int y1, int x2, int y2, unsigned int col)
{
	TftDrawLine(Tft,x1,y1,x2,y1,col);
	TftDrawLine(Tft,x1,y1,x1,y2,col);
	TftDrawLine(Tft,x2,y1,x2,y2,col);
	TftDrawLine(Tft,x1,y2,x2,y2,col);
	return 1;
}

int XTft_DrawSolidBox(XTft *Tft, int x1, int y1, int x2, int y2, unsigned int col)
{
   int xmin,xmax,ymin,ymax,i,j;

   if (x1 >= 0 &&
       x1 <= DISPLAY_COLUMNS-1 &&
       x2 >= 0 &&
       x2 <= DISPLAY_COLUMNS-1 &&
       y1 >= 0 &&
       y1 <= DISPLAY_ROWS-1 &&
       y2 >= 0 &&
       y2 <= DISPLAY_ROWS-1) {
      if (x2 < x1) {
         xmin = x2;
         xmax = x1;
      }
      else {
         xmin = x1;
         xmax = x2;
      }
      if (y2 < y1) {
         ymin = y2;
         ymax = y1;
      }
      else {
         ymin = y1;
         ymax = y2;
      }

      for (i=xmin; i<=xmax; i++) {
         for (j=ymin; j<=ymax; j++) {
	   XTft_SetPixel(Tft, i, j, col);
         }
      }	   XTft_SetPixel(Tft, i, j, col);
      return 0;
   }
   return 1;

}

int Draw_UIBox (XTft *TftInstance, unsigned int col){

	TftDrawLine(TftInstance, 0, 0,   639,   0, col);
	TftDrawLine(TftInstance, 0, 98,  639,  98, col);
	TftDrawLine(TftInstance, 0, 119, 639, 119, col);
	TftDrawLine(TftInstance, 0,   0,   0, 479, col);
	TftDrawLine(TftInstance, 639, 0, 639, 479, col);
	return 1;
}



int TftDrawLine(XTft *InstancePtr, int ColStartPos, int RowStartPos,
			int ColEndPos, int RowEndPos, unsigned int PixelVal)
{
	int Slope, YIntercept;
	int Xmin,Ymin;
	int Xmax,Ymax;
	int Index1,Index2;
	int Mx;

	 /** Check whether the given position of X,Y dimensions
	 * are below the limits of the screen.*/

	if (ColStartPos >= 0 && ColStartPos <= (DISPLAY_COLUMNS - 1) &&
		ColEndPos >= 0 && ColEndPos <= (DISPLAY_COLUMNS - 1) &&
		RowStartPos >= 0 && RowStartPos <= (DISPLAY_ROWS - 1) &&
		RowEndPos >= 0 && RowEndPos <= (DISPLAY_ROWS - 1)) {

		/** Check the exception case where slope can be infinite
		 * that is vertical line. */

		if (ColEndPos-ColStartPos != 0) {
			Slope = ((RowEndPos - RowStartPos) /
				(ColEndPos - ColStartPos) * 100000);
			YIntercept = RowStartPos -
					((Slope / 100000) * ColStartPos);
		} else {
			Slope = 0;
			YIntercept = (-1);
		}

		/* * Update the min and max position by conditional checking.*/

		if (ColEndPos < ColStartPos) {
			Xmin = ColEndPos;
			Xmax = ColStartPos;
		} else {
			Xmin = ColStartPos;
			Xmax = ColEndPos;
		}
		if (RowEndPos < RowStartPos) {
			Ymin = RowEndPos;
			Ymax = RowStartPos;
		} else {
			Ymin = RowStartPos;
			Ymax = RowEndPos;
		}

		for (Index1 = Xmin; Index1 <= Xmax; Index1++) {
			Mx = (Slope * Index1) / 100000;
			for (Index2 = Ymin; Index2 <= Ymax; Index2++) {
				if ((Index2 - Mx) == YIntercept) {
					XTft_SetPixel(InstancePtr, Index1,
						 Index2, PixelVal);
				}
				else {
					if((Slope == 0) &&
							(YIntercept == -1)) {
						XTft_SetPixel(InstancePtr,
							Index1, Index2,
							PixelVal);
					}
				}
			}
		}
		return XST_SUCCESS;
	} else {
		return XST_FAILURE;
	}

}
